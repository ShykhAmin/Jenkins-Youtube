pipeline {
    agent any

    environment {
        // Define environment variables
        BUILD_DIR = 'target' // Maven builds artifacts in the 'target' directory
        ARTIFACT_NAME = 'app.war' // Name of the WAR file
        TOMCAT_TEST_WEBAPPS = '/opt/tomcat-test/webapps/' // Tomcat test server webapps directory
        TOMCAT_PROD_WEBAPPS = '/opt/tomcat-prod/webapps/' // Tomcat production server webapps directory
    }

    stages {
        // Stage 1: Checkout code from SCM
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/springhow/spring-boot-war-example.git'
            }
        }

        // Stage 2: Run tests
        stage('Test') {
            steps {
                sh 'echo "Running tests..."'
                sh 'mvn test' // Run Maven tests
            }
            post {
                success {
                    echo 'Tests passed!'
                }
                failure {
                    echo 'Tests failed!'
                    error 'Pipeline failed due to test failures'
                }
            }
        }

        // Stage 3: Build the application
        stage('Build') {
            steps {
                sh 'echo "Building application..."'
                sh 'mvn clean package' // Build the application using Maven
                sh "cp ${BUILD_DIR}/*.war ${ARTIFACT_NAME}" // Copy the WAR file to the artifact name
            }
            post {
                success {
                    echo 'Build successful!'
                    archiveArtifacts artifacts: "${ARTIFACT_NAME}", followSymlinks: false // Archive the artifact
                }
                failure {
                    echo 'Build failed!'
                    error 'Pipeline failed due to build errors'
                }
            }
        }

        // Stage 4: Deploy to Test Server
        stage('Deploy to Test Server') {
            steps {
                sh 'echo "Deploying to test server..."'
                sh "sudo cp ${ARTIFACT_NAME} ${TOMCAT_TEST_WEBAPPS}" // Copy WAR file to test server's webapps directory
                sh "sudo stopTomcat" // Restart Tomcat production server
                sh "sudo startTomcat"
            }
            post {
                success {
                    echo 'Deployment to test server successful!'
                }
                failure {
                    echo 'Deployment to test server failed!'
                    error 'Pipeline failed due to deployment errors'
                }
            }
        }

        // Stage 5: Approve Production Deployment (Manual Step)
        stage('Approve Production Deployment') {
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
            }
        }

        // Stage 6: Deploy to Production Server
        stage('Deploy to Production Server') {
            steps {
                sh 'echo "Deploying to production server..."'
                sh "sudo cp ${ARTIFACT_NAME} ${TOMCAT_PROD_WEBAPPS}" // Copy WAR file to production server's webapps directory
                sh "sudo stopTomcat" // Restart Tomcat production server
                sh "sudo startTomcat"
            }
            post {
                success {
                    echo 'Deployment to production server successful!'
                }
                failure {
                    echo 'Deployment to production server failed!'
                    error 'Pipeline failed due to deployment errors'
                }
            }
        }
    }

    post {
        // Clean up after the pipeline runs
        always {
            sh 'echo "Cleaning up..."'
            sh "rm -rf ${ARTIFACT_NAME}" // Clean up artifacts
        }
    }
}
