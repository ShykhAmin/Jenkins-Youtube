pipeline {
    agent any

    environment {
        // Define environment variables
        DEPLOY_TEST_SERVER = 'http://192.169.0.108:9090'
        DEPLOY_PROD_SERVER = 'http://192.169.0.108:9090'
        BUILD_DIR = 'build'
        ARTIFACT_NAME = 'app.tar.gz'
    }

    stages {
        // Stage 1: Checkout code from SCM
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/springhow/spring-boot-war-example.git'
            }
        }

        // Stage 2: Run tests
        stage('Test') {
            steps {
                sh 'echo "Running tests..."'
                sh 'mvn test' // Replace with your test command
            }
            post {
                success {
                    echo 'Tests passed!'
                }
                failure {
                    echo 'Tests failed!'
                    error 'Pipeline failed due to test failures'
                }
            }
        }

        // Stage 3: Build the application
        stage('Build') {
            steps {
                sh 'echo "Building application..."'
                sh 'mvn build' // Replace with your build command
                sh "tar -czvf ${ARTIFACT_NAME} -C ${BUILD_DIR} ." // Package the build artifacts
            }
            post {
                success {
                    echo 'Build successful!'
                }
                failure {
                    echo 'Build failed!'
                    error 'Pipeline failed due to build errors'
                }
            }
        }

        // Stage 4: Deploy to Test Server
        stage('Deploy to Test Server') {
            steps {
                sh 'echo "Deploying to test server..."'
                sh "scp ${ARTIFACT_NAME} user@${DEPLOY_TEST_SERVER}:/path/to/deploy"
                sh "ssh user@${DEPLOY_TEST_SERVER} 'tar -xzvf /app1/${ARTIFACT_NAME} -C /app1'"
                sh "ssh user@${DEPLOY_TEST_SERVER} 'systemctl restart your-app-service'" // Restart service if needed
            }
            post {
                success {
                    echo 'Deployment to test server successful!'
                }
                failure {
                    echo 'Deployment to test server failed!'
                    error 'Pipeline failed due to deployment errors'
                }
            }
        }

        // Stage 5: Approve Production Deployment (Manual Step)
        stage('Approve Production Deployment') {
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
            }
        }

        // Stage 6: Deploy to Production Server
        stage('Deploy to Production Server') {
            steps {
                sh 'echo "Deploying to production server..."'
                sh "scp ${ARTIFACT_NAME} user@${DEPLOY_PROD_SERVER}:/production-app1"
                sh "ssh user@${DEPLOY_PROD_SERVER} 'tar -xzvf /production-app1/${ARTIFACT_NAME} -C /production-app1'"
                sh "ssh user@${DEPLOY_PROD_SERVER} 'systemctl restart your-app-service'" // Restart service if needed
            }
            post {
                success {
                    echo 'Deployment to production server successful!'
                }
                failure {
                    echo 'Deployment to production server failed!'
                    error 'Pipeline failed due to deployment errors'
                }
            }
        }
    }

    post {
        // Clean up after the pipeline runs
        always {
            sh 'echo "Cleaning up..."'
            sh "rm -rf ${ARTIFACT_NAME}" // Clean up artifacts
        }
    }
}
